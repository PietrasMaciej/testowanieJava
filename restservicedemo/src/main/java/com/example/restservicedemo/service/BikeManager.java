package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Bike;

public class BikeManager {
	
	private Connection connection;
	
	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_BIKE = "CREATE TABLE Bike(id bigint GENERATED BY DEFAULT AS IDENTITY, make varchar(20), model varchar(20), yop integer)";

	private PreparedStatement addBikesStmt;
	private PreparedStatement deleteAllBikesStmt;
	private PreparedStatement getAllBikesStmt;
	private PreparedStatement getBikeByIdStmt;
	
	private Statement statement;
	
	public BikeManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			
			while (rs.next()) {
				if ("Bike".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_BIKE);

			addBikesStmt = connection
					.prepareStatement("INSERT INTO Bike (id, make, model, yop) VALUES (?, ?, ?, ?)");
			deleteAllBikesStmt = connection
					.prepareStatement("DELETE FROM Bike");
			getAllBikesStmt = connection
					.prepareStatement("SELECT id, make, model, yop FROM Bike");
			getBikeByIdStmt = connection
					.prepareStatement("SELECT id, make, model, yop FROM Bike where id = ?");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnnection() {
		return connection;
	}
	
	public void clearBikes() {
		try {
			deleteAllBikesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int addBike(Bike bike) {
		int count = 0;
		
		try {
			addBikesStmt.setLong(1, bike.getId());
			addBikesStmt.setString(2, bike.getMake());
			addBikesStmt.setString(3, bike.getModel());
			addBikesStmt.setInt(4, bike.getYop());
			
			count = addBikesStmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Bike> getAllBikes() {
		List<Bike> bikes = new ArrayList<Bike>();
		
		try {
			ResultSet rs = getAllBikesStmt.executeQuery();
			
			while (rs.next()) {
				Bike b = new Bike();
				b.setId(rs.getInt("id"));
				b.setMake(rs.getString("make"));
				b.setModel(rs.getString("model"));
				b.setYop(rs.getInt("yop"));
				bikes.add(b);
			}
 		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return bikes;
	}
	
	public Bike getBike(Long id) {
		Bike b = new Bike();
		
		try {
			getBikeByIdStmt.setLong(1, id);
			ResultSet rs = getBikeByIdStmt.executeQuery();
			
			while (rs.next()) {
				b.setId(rs.getInt("id"));
				b.setMake(rs.getString("make"));
				b.setModel(rs.getString("model"));
				b.setYop(rs.getInt("yop"));
				break;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return b;
	}
}